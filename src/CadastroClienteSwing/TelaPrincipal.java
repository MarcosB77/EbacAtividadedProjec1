/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CadastroClienteSwing;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import JavaAplication.dao.IClienteDAO;
import javaapplication2.domain.Cliente;
import JavaAplication.dao.ClienteMapDAO;





/**
 *
 * AlunoMarcos
 * 
 */
public class TelaPrincipal extends javax.swing.JFrame {
    
    // para para trabalhar com tabela
    private final DefaultTableModel modelo = new DefaultTableModel();
    private final IClienteDAO clienteDAO = new ClienteMapDAO() {};

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
        initCustomComponents();
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        lblCpf = new javax.swing.JLabel();
        txtCpf = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaCliente = new javax.swing.JTable();
        bntExcluir = new javax.swing.JButton();
        lblCidade = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        txtCidade = new javax.swing.JTextField();
        txtEstado = new javax.swing.JTextField();
        bntAtualizar = new javax.swing.JButton();
        bntLimparCampos = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuSair = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblNome.setText("Nome:");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        lblCpf.setText("CPF:");

        tabelaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaCliente);

        bntExcluir.setText("Excluir");
        bntExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntExcluirActionPerformed(evt);
            }
        });

        lblCidade.setText("             Cidade:");

        lblEstado.setText("Estado:");

        bntAtualizar.setText("Atualizar");

        bntLimparCampos.setText("Limpar ");

        jMenu1.setText("Opções");

        jMenuSair.setText("Sair");
        jMenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSairActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSair);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(lblNome, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(lblCidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCpf, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                        .addGap(152, 152, 152))))
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(bntLimparCampos))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bntExcluir)
                            .addComponent(btnSalvar)
                            .addComponent(bntAtualizar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCpf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCidade)
                    .addComponent(lblEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSalvar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntAtualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bntLimparCampos))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 // Método chamado quando o item de menu "Sair" é selecionado
    private void jMenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSairActionPerformed
         int result = JOptionPane.showConfirmDialog(this, "Deseja sair da aplicação?", "Sair",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);
    if (result == JOptionPane.YES_OPTION) {
        System.exit(0);
                }
          
    }//GEN-LAST:event_jMenuSairActionPerformed
// Método chamado quando o campo de nome é modificado
    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed
 // Método chamado quando o botão "Salvar" é clicado
    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
    String nome = txtNome.getText();
    String cpf = txtCpf.getText();
    String cidade = txtCidade.getText();
    String estado = txtEstado.getText();

    // Verifica se os campos obrigatórios são válidos
    if (isCamposValidos(nome, cpf, cidade, estado)) {
        // Criação do cliente usando o construtor atualizado
       Cliente cliente = new Cliente(nome, cpf, null, null, null, cidade, estado);
        // Tenta cadastrar o cliente
        Boolean isCadastrado = this.clienteDAO.cadastrar(cliente);

        // Adiciona log para depuração
        if (isCadastrado) {
            // Adiciona todas as colunas conforme definido no modelo
            modelo.addRow(new Object[]{cliente.getNome(), cliente.getCpf(), cliente.getCidade(), cliente.getEstado()});
            modelo.fireTableDataChanged();  // Atualiza a tabela após adicionar uma linha
            limparCampos();

            // Exibe mensagem de sucesso
            JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Se o cliente já estiver cadastrado, exibe uma mensagem
            JOptionPane.showMessageDialog(this, "Cliente já tem cadastro na Plataforma", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    } else {
        // Se os campos não forem válidos, exibe uma mensagem de atenção
        JOptionPane.showMessageDialog(this, "Todos os campos devem estar preenchidos", "ATENÇÃO", JOptionPane.INFORMATION_MESSAGE);
    }{
    }//GEN-LAST:event_btnSalvarActionPerformed
    }
    
    
    
    private void bntExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntExcluirActionPerformed
        int linhaSelecionada = tabelaCliente.getSelectedRow();

    if (linhaSelecionada >= 0) {
        int result = JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este cliente?", "Cuidado",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (result == JOptionPane.YES_OPTION) {
            // Obtenha o valor da coluna do CPF como uma String
            String cpfStr = tabelaCliente.getValueAt(linhaSelecionada, 1).toString();

            try {
                // Tente converter a String para Long
                Long cpf = Long.parseLong(cpfStr);

                // Agora você pode usar 'cpf' normalmente
                this.clienteDAO.excluir(cpf);
                modelo.removeRow(linhaSelecionada);

                JOptionPane.showMessageDialog(null, "Cliente excluído com sucesso", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                limparCampos();
            } catch (NumberFormatException e) {
                // Lida com o caso em que a conversão falha
                JOptionPane.showMessageDialog(null, "Erro ao obter CPF", "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                // Lida com outras exceções possíveis
                JOptionPane.showMessageDialog(null, "Erro ao excluir cliente: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Exclusão cancelada", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Nenhum cliente selecionado", "Erro", JOptionPane.INFORMATION_MESSAGE);
    }{
    }//GEN-LAST:event_bntExcluirActionPerformed
    
    }
    private void bntAtualizarActionPerformed(java.awt.event.ActionEvent evt) { 
      
     int linhaSelecionada = tabelaCliente.getSelectedRow();

    if (linhaSelecionada >= 0) {
        String cpfStr = tabelaCliente.getValueAt(linhaSelecionada, 1).toString();
        try {
            Long cpf = Long.parseLong(cpfStr);
            String nome = txtNome.getText();
            String cidade = txtCidade.getText();
            String estado = txtEstado.getText();

            // Validate fields (excluding CPF)
            if (isCamposValidos(nome, cidade, estado)) {
                Cliente cliente = new Cliente(nome, cpf.toString(), null, null, null, cidade, estado);
                boolean isAtualizado = this.clienteDAO.atualizar(cliente);

                if (isAtualizado) {
                    // Certifique-se de que os valores estão sendo atualizados corretamente
                    modelo.setValueAt(nome, linhaSelecionada, 0);
                    modelo.setValueAt(cidade, linhaSelecionada, 2);
                    modelo.setValueAt(estado, linhaSelecionada, 3);

                    JOptionPane.showMessageDialog(this, "Cliente atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    limparCampos();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar o cliente", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro ao obter CPF", "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar cliente: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Nenhum cliente selecionado", "Erro", JOptionPane.ERROR_MESSAGE);
    }
    
}

    private void btnLimparCamposActionPerformed(java.awt.event.ActionEvent evt) {                                          
    limparCampos();
}

     //metodo pra clique do mouse
   private void tabelaClienteMouseClicked(java.awt.event.MouseEvent evt) {
    int linhaSelecionada = tabelaCliente.getSelectedRow();
    
    if (linhaSelecionada >= 0) {
       String cpfStr = tabelaCliente.getValueAt(linhaSelecionada, 1).toString();
       Long cpf = Long.parseLong(cpfStr);
        Cliente cliente = this.clienteDAO.consultar(cpf);

        txtNome.setText(cliente.getNome());
        txtCpf.setText(cliente.getCpf().toString());
        txtCidade.setText(cliente.getCidade());  // Atualiza o campo de Cidade
        txtEstado.setText(cliente.getEstado());  
}
   }
 // Componentes da interface gráfica
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntAtualizar;
    private javax.swing.JButton bntExcluir;
    private javax.swing.JButton bntLimparCampos;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuSair;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCidade;
    private javax.swing.JLabel lblCpf;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblNome;
    private javax.swing.JTable tabelaCliente;
    private javax.swing.JTextField txtCidade;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables

    // Método para verificar se os campos são válidos
   private boolean isCamposValidos(String ...campos) {
    for (String campo : campos) {
        if (campo == null || campo.trim().isEmpty()) {
            return false;
        }
    }
    return true;
}
    // para para trabalhar com tabela
    private void initCustomComponents() {
        modelo.addColumn("Nome");
        modelo.addColumn("Cpf");
        modelo.addColumn("Cidade");
        modelo.addColumn("Estado");
  
        tabelaCliente.setModel(modelo);
        // metodo pro clique do mouse na String sem isso o codigo "BUGAR"
       tabelaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaClienteMouseClicked(evt);
            }
        });
       //sempre que incluir nesse metodo alguma função
        bntAtualizar.addActionListener(new java.awt.event.ActionListener() {
    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        bntAtualizarActionPerformed(evt);
    }
});
        // Adiciona o evento de clique ao botão "Limpar Campos"
bntLimparCampos.addActionListener(new java.awt.event.ActionListener() {
    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnLimparCamposActionPerformed(evt);
    }
});
    }

    private void limparCampos() {
    txtNome.setText("");
    txtCpf.setText("");
    txtCidade.setText("");  
    txtEstado.setText("");  
}
}